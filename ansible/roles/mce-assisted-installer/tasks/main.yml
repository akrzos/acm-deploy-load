---
# mce-assisted-installer tasks
# Assisted-installer is included with MCE instead of RHACM starting since ACM 2.5

# Current workarounds:
# * Patch provisioning configuration
# * Patch Hive configuration

- name: Create directory for MCE assisted-installer
  file:
    path: "{{ install_directory }}/mce-assisted-installer"
    state: directory

- name: Obtain ocp version data per MCE installable OCP version
  include_tasks: mce-ocp-version.yml
  loop: "{{ mce_assisted_ocp_versions }}"

- name: Get disconnected registry certificate
  slurp:
    src: "{{ registry_path }}/certs/domain.crt"
  register: mirror_cert
  when: rhacm_disconnected_registry and rhacm_disconnected_registry|length > 1

- name: Template files for mce/rhacm assisted-installer
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  when: item.enabled | default(true)
  loop:
  - src: configmap-cpumemory.yml
    dest: "{{ install_directory }}/mce-assisted-installer/configmap-cpumemory.yml"
  - src: agentserviceconfig.yml
    dest: "{{ install_directory }}/mce-assisted-installer/agentserviceconfig.yml"
  - src: assisted-mirror-config.yml
    dest: "{{ install_directory }}/mce-assisted-installer/assisted-mirror-config.yml"
  - src: agent-install.openshift.io_agentclassifications-crd.yaml
    dest: "{{ install_directory }}/mce-assisted-installer/agent-install.openshift.io_agentclassifications-crd.yaml"
    enabled: "{{ mce_2_1_patch }}"
  - src: clusterrole-patch.yaml
    dest: "{{ install_directory }}/mce-assisted-installer/clusterrole-patch.yaml"
    enabled: "{{ mce_2_1_patch }}"

- name: Patch provisioning configuration
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc patch provisioning provisioning-configuration --type merge -p '{"spec":{"watchAllNamespaces": true }}'

- name: Patch hive configuration
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc patch hiveconfig hive  --type merge -p '{"spec":{"targetNamespace":"hive","logLevel":"debug","featureGates":{"custom":{"enabled":["AlphaAgentInstallStrategy"]},"featureSet":"Custom"} }}'

- name: Apply assisted-service manifests
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc apply -f {{ item.manifest }}
  when: item.enabled | default(true)
  loop:
  - manifest: "{{ install_directory }}/mce-assisted-installer/configmap-cpumemory.yml"
  - manifest: "{{ install_directory }}/mce-assisted-installer/agentserviceconfig.yml"
  - manifest: "{{ install_directory }}/mce-assisted-installer/assisted-mirror-config.yml"
  - manifest: "{{ install_directory }}/mce-assisted-installer/agent-install.openshift.io_agentclassifications-crd.yaml"
    enabled: "{{ mce_2_1_patch }}"
  register: result
  until: result.failed == false
  retries: 2
  delay: 3

- name: Apply clusterroles patch for MCE 2.1
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc patch clusterrole open-cluster-management:assisted-service:assisted-service --type=json --patch "$(cat {{ install_directory }}/mce-assisted-installer/clusterrole-patch.yaml)"
  when: mce_2_1_patch

- name: Wait for assisted-service pod exists
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get pods -n {{ mce_assisted_service_namespace }} -l app=assisted-service
  retries: 150
  delay: 2
  register: as_pod
  until: as_pod.failed == false

- name: Wait for assisted-service pod running
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get pods -n {{ mce_assisted_service_namespace }} -l app=assisted-service -o jsonpath='{.items[0].status.phase}'
  retries: 150
  delay: 2
  register: as_pod
  until: as_pod.stdout == "Running"
  when: wait_for_assisted_service_pod
