---
# aap-configure tasks

- name: Copy aap license manifest file to aap-deploy directory
  copy:
    dest: "{{ install_directory }}/aap-deploy/aap_manifest.zip"
    content: "{{ aap_license_manifest }}"

- name: Clone acm-ansible-collection-demo to bastion
  git:
    repo: "{{ acm_ansible_collection_demo_repo }}"
    dest: "{{ install_directory }}/aap-deploy/acm-ansible-collection-demo"
    force: true
    version: "{{ acm_ansible_collection_demo_repo_branch }}"

- name: Create acm-ansible-collection-demo repo in gogs
  uri:
    url: "http://{{ gogs_host }}:{{ gogs_port }}/api/v1/admin/users/{{ gogs_username }}/repos"
    user: "{{ gogs_username }}"
    password: "{{ gogs_password }}"
    force_basic_auth: true
    method: POST
    headers:
      content-type: application/json
      Accept: application/json
    body: {"name": "acm-ansible-collection-demo", "description": "test repo", "private": false}
    body_format: json
    validate_certs: no
    status_code: 201
    return_content: yes
  ignore_errors: true

- name: Push acm-ansible-collection-demo into gogs
  shell: |
    cd {{ install_directory }}/aap-deploy/acm-ansible-collection-demo
    git remote add origin-gogs http://{{ gogs_username }}:{{ gogs_password }}@{{ gogs_host }}:{{ gogs_port }}/testadmin/acm-ansible-collection-demo.git
    git push -u origin-gogs --all --force

- name: Get the automation hub admin password
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get secret -n ansible-automation-platform automationhub-admin-password -o jsonpath='{.data.password}' | base64 -d
  register: get_automationhub_admin_pw

- name: Get the automation controller admin password
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get secret -n ansible-automation-platform automationcontroller-admin-password -o jsonpath='{.data.password}' | base64 -d
  register: get_automationcontroller_admin_pw

- name: Get the automation hub route
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc -n ansible-automation-platform get route automationhub -o jsonpath='{.spec.host}'
  register: automationhub_route

- name: Get the automation controller route
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc -n ansible-automation-platform get route automationcontroller -o jsonpath='{.spec.host}'
  register: automationcontroller_route

- name: Set vars for configuration
  set_fact:
    automationhub_admin_pw: "{{ get_automationhub_admin_pw.stdout }}"
    automationhub_url: "https://{{ automationhub_route.stdout }}"
    automationcontroller_admin_pw: "{{ get_automationcontroller_admin_pw.stdout }}"
    automationcontroller_url: "https://{{ automationcontroller_route.stdout }}"

# Get and set token vars
- name: Create automation hub galaxy token
  uri:
    url: "{{ automationhub_url }}/api/galaxy/v3/auth/token/"
    user: admin
    password: "{{ automationhub_admin_pw }}"
    method: POST
    validate_certs: false
    return_content: true
  register: create_automationhub_galaxy_token

- name: Create automation controller token
  awx.awx.token:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
  register: create_automationcontroller_token

- name: Set token vars
  set_fact:
    automationhub_galaxy_token: "{{ create_automationhub_galaxy_token.json.token }}"
    automationcontroller_token: "{{ create_automationcontroller_token.ansible_facts.controller_token.token }}"

# Configure automation hub
- name: Create automation hub galaxy namespaces
  uri:
    url: "{{ automationhub_url }}/api/galaxy/_ui/v1/namespaces/"
    user: admin
    password: "{{ automationhub_admin_pw }}"
    force_basic_auth: true
    method: POST
    validate_certs: false
    body_format: json
    status_code: [201, 409]
    return_content: true
    body: {
        "name": "{{ item }}",
        "groups": []
    }
  loop:
  - amazon
  - awx
  - kubernetes
  - stolostron

- name: Checkout the latest stolostron ansible-collection.core
  git:
    repo: "{{ stolostron_ansible_collection_core_repo }}"
    dest: "{{ install_directory }}/aap-deploy/ansible-collection.core"
    force: true
    version: "{{ stolostron_ansible_collection_core_repo_branch }}"

- name: Template out ansible.cfg
  template:
    src: ansible.cfg.j2
    dest: "{{ install_directory }}/aap-deploy/ansible-collection.core/ansible.cfg"

- name: Get latest ansible-collection.core git tag
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    git tag --sort=taggerdate | grep -E '[0-9]' | tail -1 | cut -b 2-7
  register: ansible_collection_git_tag

- name: Setup stolostron ansible-collection.core virtual environment
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    python3 -m venv .venv
    source .venv/bin/activate
    pip3 install --upgrade pip
    pip3 install ansible

- name: Build stolostron ansible-collection.core collection
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    source .venv/bin/activate
    rm -f stolostron-core-{{ ansible_collection_git_tag.stdout }}.tar.gz
    ansible-galaxy collection build

- name: Publish stolostron ansible-collection.core collection
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    source .venv/bin/activate
    ansible-galaxy collection publish stolostron-core-{{ ansible_collection_git_tag.stdout }}.tar.gz --ignore-certs

# ansible-galaxy command needed by sourcing the venv however need to cd out to reach external galaxy
- name: Download additional required ansible collections
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    source .venv/bin/activate
    cd {{ install_directory }}/aap-deploy
    ansible-galaxy collection download {{ item }}
  loop:
  # - amazon.aws
  - awx.awx
  - kubernetes.core

# For unknown reasons the ansible-galaxy collection download command does not seem to work with amazon.aws collection,
# Thus lets download it manually
- name: Download amazon.aws collection via url
  get_url:
    validate_certs: false
    force: true
    url: https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/amazon-aws-6.5.0.tar.gz
    dest: "{{ install_directory }}/aap-deploy/collections"

- name: Publish additional collections
  shell: |
    cd {{ install_directory }}/aap-deploy/ansible-collection.core
    source .venv/bin/activate
    ansible-galaxy collection publish ../collections/{{ item }}-* --ignore-certs
  loop:
  - amazon-aws
  - awx-awx
  - kubernetes-core

- name: Approve automation hub collections
  uri:
    url: "{{ automationhub_url }}/api/galaxy/v3/collections/{{ item.name }}/{{ item.suffix }}/versions/{{ item.version }}/move/staging/published/"
    user: admin
    password: "{{ automationhub_admin_pw }}"
    force_basic_auth: true
    method: POST
    validate_certs: false
    body_format: json
    status_code: [202]
    return_content: true
    body: {
        "name": "{{ item.name }}",
        "groups": []
    }
  loop:
  - name: amazon
    suffix: aws
    version: 6.5.0
  - name: awx
    suffix: awx
    version: 23.2.0
  - name: kubernetes
    suffix: core
    version: 2.4.0
  - name: stolostron
    suffix: core
    version: "{{ ansible_collection_git_tag.stdout }}"

# Configure automation controller
- name: Set automation controller subscription manifest (license zip file)
  awx.awx.license:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    manifest: "{{ install_directory }}/aap-deploy/aap_manifest.zip"
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"

- name: Configure awx credential_types authentication
  awx.awx.credential_type:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: kubeconfig
    kind: cloud
    state: present
    inputs: "{{ lookup('file', 'credential_inputs_kubeconfig.json') }}"
    injectors: "{{ lookup('file', 'credential_injector_kubeconfig.json') }}"

- name: Fetch the hub kubeconfig for awx credential
  slurp:
    src: "{{ hub_cluster_kubeconfig }}"
  register: fetched_hub_kubeconfig

- name: Instantiate hub kubeconfig awx credential
  awx.awx.credential:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: hub-acm-kubeconfig
    organization: Default
    credential_type: kubeconfig
    state: present
    inputs: "{'kube_config':'{{ fetched_hub_kubeconfig.content | b64decode | to_json }}'}"
    # inputs:
    #   kube_config: "{{ fetched_hub_kubeconfig.content | b64decode }}"

- name: Configure automation controller authentication to automation hub
  awx.awx.credential:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: hub-galaxy-token
    organization: Default
    credential_type: Ansible Galaxy/Automation Hub API Token
    state: present
    inputs: "{'url':'{{ automationhub_url }}/api/galaxy/content/published/','token':'{{ automationhub_galaxy_token }}'}"

- name: Disable SSL verfication due to self-signed certificates
  awx.awx.settings:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: GALAXY_IGNORE_CERTS
    value: "true"

- name: Add automation hub as default galaxy credentials for automation controller
  awx.awx.organization:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: Default
    galaxy_credentials: hub-galaxy-token
    state: present

- name: Automation controller create a project
  awx.awx.project:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: aap-for-ran-ztp-project
    organization: Default
    scm_type: git
    scm_branch: "{{ acm_ansible_collection_demo_repo_branch }}"
    scm_url: "http://{{ gogs_username }}:{{ gogs_password }}@{{ gogs_host }}:{{ gogs_port }}/testadmin/acm-ansible-collection-demo.git"

- name: Automation controller create inventory
  awx.awx.inventory:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: hub-acm-inventory
    organization: Default

- name: Automation controller create inventory-source
  awx.awx.inventory_source:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: acm-dynamic-inventory
    organization: Default
    inventory: hub-acm-inventory
    update_on_launch: true
    credential: 3
    source: scm
    source_project: aap-for-ran-ztp-project
    source_path: inventories/cluster-inventory-example.yml

- name: Automation controller create template
  awx.awx.job_template:
    controller_host: "{{ automationcontroller_url }}"
    validate_certs: false
    controller_username: admin
    controller_password: "{{ automationcontroller_admin_pw }}"
    name: ztp-day2-automation-template
    project: aap-for-ran-ztp-project
    playbook: playbooks/cluster-mgmt.yml
    inventory: hub-acm-inventory
    ask_variables_on_launch: true
    allow_simultaneous: true
    extra_vars: "{{ lookup('file', 'template_extra_vars.json') }}"
    credentials: hub-acm-kubeconfig
