---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ inventory_hostname }}
  labels:
    name: {{ inventory_hostname }}
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-pull-secret
  namespace: {{ inventory_hostname }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "{{ pull_secret | b64encode }}"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ inventory_hostname }}-bmc-secret
  namespace: {{ inventory_hostname }}
type: Opaque
data:
  password: {{ bmc_password_base64 }}
  username: {{ bmc_username_base64 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ inventory_hostname }}-marketplace-namespace
  namespace: {{ inventory_hostname }}
data:
  namespace.yml: |
    # Taken from https://github.com/operator-framework/operator-marketplace/blob/53c124a3f0edfd151652e1f23c87dd39ed7646bb/manifests/01_namespace.yaml
    # Update it as the source evolves.
    apiVersion: v1
    kind: Namespace
    metadata:
      annotations:
        openshift.io/node-selector: ""
        workload.openshift.io/allowed: "management"
      labels:
        openshift.io/cluster-monitoring: "true"
        pod-security.kubernetes.io/enforce: baseline
        pod-security.kubernetes.io/enforce-version: v1.25
        pod-security.kubernetes.io/audit: baseline
        pod-security.kubernetes.io/audit-version: v1.25
        pod-security.kubernetes.io/warn: baseline
        pod-security.kubernetes.io/warn-version: v1.25
      name: "openshift-marketplace"
{% if ai_clusterinstance_varlibcontainers_partitioned %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ inventory_hostname }}-varlibcontainers-partitioned
  namespace: {{ inventory_hostname }}
data:
  varlibcontainers-partitioned.yml: |
    ### https://cloud.redhat.com/blog/a-guide-to-creating-a-separate-disk-partition-at-installation-time
    ### https://docs.openshift.com/container-platform/4.13/installing/installing_vsphere/installing-vsphere.html#installation-disk-partitioning_installing-vsphere
    apiVersion: machineconfiguration.openshift.io/v1
    kind: MachineConfig
    metadata:
      labels:
        machineconfiguration.openshift.io/role: master
      name: 98-var-lib-containers-partitioned
    spec:
      config:
        ignition:
          version: 3.2.0
        storage:
          disks:
            - device: /dev/sda
              partitions:
                - label: var-lib-containers
                  startMiB: 50000 # Leave room for rootfs
                  sizeMiB: 0 # Use available space
          filesystems:
            - device: /dev/disk/by-partlabel/var-lib-containers
              format: xfs
              mountOptions:
                - defaults
                - prjquota
              path: /var/lib/containers
              wipeFilesystem: true
        systemd:
          units:
            - contents: |-
                # Generated by Butane
                [Unit]
                Before=local-fs.target
                Requires=systemd-fsck@dev-disk-by\x2dpartlabel-var\x2dlib\x2dcontainers.service
                After=systemd-fsck@dev-disk-by\x2dpartlabel-var\x2dlib\x2dcontainers.service

                [Mount]
                Where=/var/lib/containers
                What=/dev/disk/by-partlabel/var-lib-containers
                Type=xfs
                Options=defaults,prjquota

                [Install]
                RequiredBy=local-fs.target
              enabled: true
              name: var-lib-containers.mount
{% endif %}
---
apiVersion: siteconfig.open-cluster-management.io/v1alpha1
kind: ClusterInstance
metadata:
  name: {{ inventory_hostname }}
  namespace: {{ inventory_hostname }}
spec:
  additionalNTPSources:
  - {{ hostvars[inventory_hostname]['hv_ip'] }}
  baseDomain: {{ hostvars[inventory_hostname]['base_domain'] }}
  clusterImageSetNameRef: {{ cluster_image_set }}
  extraLabels:
    ManagedCluster:
      common: 'true'
{% if sno_du_profile in ["4.15", "4.16", "4.17", "4.18", "4.19"] %}
      du-profile: "{{ sno_du_profile }}"
{% endif %}
      global-hub.open-cluster-management.io/deploy-mode: default
      group-du-sno: ''
      name: {{ inventory_hostname }}
{% if sno_mc_observability %}
      observability: enabled
{% else %}
      observability: disabled
{% endif %}
      sites: {{ inventory_hostname }}
  clusterName: {{ inventory_hostname }}
  clusterNetwork:
  - cidr: {{ "fd01::/48" if hostvars[inventory_hostname]['ip'] | ansible.utils.ipv6 else "10.128.0.0/14" }}
    hostPrefix: {{ sno_cluster_network_host_prefix }}
  clusterType: SNO
  extraManifestsRefs:
  - name: {{ inventory_hostname }}-marketplace-namespace
{% if ai_clusterinstance_varlibcontainers_partitioned %}
  - name: {{ inventory_hostname }}-varlibcontainers-partitioned
{% endif %}
  holdInstallation: false
{% if sno_du_profile == "4.15" %}
  installConfigOverrides:  "{\"capabilities\":{\"baselineCapabilitySet\": \"None\", \"additionalEnabledCapabilities\": [ \"OperatorLifecycleManager\", \"NodeTuning\" ] }}"
{% elif sno_du_profile in ["4.16", "4.17", "4.18", "4.19"]  %}
  installConfigOverrides:  "{\"capabilities\":{\"baselineCapabilitySet\": \"None\", \"additionalEnabledCapabilities\": [ \"OperatorLifecycleManager\", \"Ingress\", \"NodeTuning\" ] }}"
  ignitionConfigOverride: "{\"ignition\":{\"version\":\"3.2.0\"},\"storage\":{\"files\":[{\"path\":\"/etc/containers/policy.json\",\"mode\":420,\"overwrite\":true,\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,ewogICAgImRlZmF1bHQiOiBbCiAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIgogICAgICAgIH0KICAgIF0sCiAgICAidHJhbnNwb3J0cyI6CiAgICAgICAgewogICAgICAgICAgICAiZG9ja2VyLWRhZW1vbiI6CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIiI6IFt7InR5cGUiOiJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIn1dCiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9\"}}]}}"
{% endif %}
  machineNetwork:
  - cidr: {{ hostvars[inventory_hostname]['machine_network'] }}
  networkType: OVNKubernetes
  nodes:
  - automatedCleaningMode: disabled
{% if hostvars[inventory_hostname]['hv_ip'] | ansible.utils.ipv6 %}
    bmcAddress: redfish-virtualmedia+http://[{{ hostvars[inventory_hostname]['hv_ip'] }}]:9000/redfish/v1/Systems/{{ hostvars[inventory_hostname]['domain_uuid'] }}
{% else %}
    bmcAddress: redfish-virtualmedia+http://{{ hostvars[inventory_hostname]['hv_ip'] }}:9000/redfish/v1/Systems/{{ hostvars[inventory_hostname]['domain_uuid'] }}
{% endif %}
    bmcCredentialsName:
      name: {{ inventory_hostname }}-bmc-secret
    bootMACAddress: {{ hostvars[inventory_hostname]['mac_address'] }}
    bootMode: UEFI
    hostName: {{ inventory_hostname }}
{% if ai_clusterinstance_ironic_inspect %}
    # Can not actually set enabled, unset is enabled
    # ironicInspect: enabled
{% else %}
    ironicInspect: disabled
{% endif %}
    nodeNetwork:
      interfaces:
      - name: {{ sno_nic_interface }}
        macAddress: {{ hostvars[inventory_hostname]['mac_address'] }}
      config:
        interfaces:
        - name: {{ sno_nic_interface }}
          type: ethernet
          state: up
          # identifier: mac-address
          # mac-address: {{ hostvars[inventory_hostname]['mac_address'] }}
{% if hostvars[inventory_hostname].ip | ansible.utils.ipv4 %}
          ipv4:
            enabled: true
            autoconf: false
            dhcp: false
            address:
            - ip: {{ hostvars[inventory_hostname]['ip'] }}
              prefix-length: {{ hostvars[inventory_hostname]['network_prefix'] }}
          ipv6:
            enabled: false
{% else %}
          ipv4:
            enabled: false
          ipv6:
            enabled: true
            autoconf: false
            dhcp: false
            address:
            - ip: {{ hostvars[inventory_hostname]['ip'] }}
              prefix-length: {{ hostvars[inventory_hostname]['network_prefix'] }}
{% endif %}
        dns-resolver:
          config:
            server:
            - {{ hostvars[inventory_hostname]['hv_ip'] }}
        routes:
          config:
          - destination: {{ "::/0" if hostvars[inventory_hostname]['ip'] | ansible.utils.ipv6 else "0.0.0.0/0" }}
            next-hop-address: {{ hostvars[inventory_hostname]['gateway'] }}
            next-hop-interface: {{ sno_nic_interface }}
    templateRefs:
    - name: {{ ai_clusterinstance_node_templates }}
      namespace: {{ ai_clusterinstance_node_templates_ns }}
  pullSecretRef:
    name: ai-pull-secret
  serviceNetwork:
  - cidr: {{ "fd02::/112" if hostvars[inventory_hostname]['ip'] | ansible.utils.ipv6 else "172.30.0.0/16" }}
  sshPublicKey: {{ lookup('file', ssh_public_key_file) }}
  templateRefs:
  - name: {{ ai_clusterinstance_cluster_templates }}
    namespace: {{ ai_clusterinstance_cluster_templates_ns }}
